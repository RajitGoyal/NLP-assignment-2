# -*- coding: utf-8 -*-
"""sentiment_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uwA44YPzk2KPvH0MY2QJcTRbctEWRFRP
"""

!pip install -U datasets huggingface_hub fsspec

!pip install -U transformers datasets huggingface_hub fsspec

import os
os.environ["WANDB_DISABLED"] = "true"

# sentiment_pipeline.py

import os
import torch
from datasets import load_dataset
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from transformers import DataCollatorWithPadding
from sklearn.metrics import accuracy_score, f1_score
import numpy as np

# 1. Load the IMDb dataset
dataset = load_dataset("imdb")

# 2. Load the tokenizer for bert-base-uncased
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")

# 3. Tokenization function
def tokenize_function(example):
    return tokenizer(example["text"], truncation=True, padding="max_length", max_length=256)

# 4. Tokenize the datasets
tokenized_datasets = dataset.map(tokenize_function, batched=True)

# 5. Set format for PyTorch
tokenized_datasets.set_format(type="torch", columns=["input_ids", "attention_mask", "label"])

# 6. Load the pre-trained BERT model for sequence classification
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)

# 7. Define compute_metrics function
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    acc = accuracy_score(labels, predictions)
    f1 = f1_score(labels, predictions)
    return {"accuracy": acc, "f1": f1}

from transformers import TrainingArguments

training_args = TrainingArguments(
    output_dir="./results",
    eval_strategy="epoch",  # <-- use eval_strategy, not evaluation_strategy
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=2,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=100,
    load_best_model_at_end=True,
    metric_for_best_model="f1",
    save_total_limit=1,
)


# 9. Data collator for dynamic padding
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

# 10. Trainer setup
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets["train"].shuffle(seed=42).select(range(2000)),  # Subset for speed
    eval_dataset=tokenized_datasets["test"].select(range(1000)),  # Subset for speed
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

# 11. Train the model
trainer.train()

# 12. Evaluate the model
eval_results = trainer.evaluate()
print(f"Evaluation results: {eval_results}")

# 13. Save the fine-tuned model
model_save_path = "./sentiment-bert-imdb"
model.save_pretrained(model_save_path)
tokenizer.save_pretrained(model_save_path)

# 14. Load the model for inference
def load_model_for_inference(model_path):
    model = BertForSequenceClassification.from_pretrained(model_path)
    tokenizer = BertTokenizer.from_pretrained(model_path)
    return model, tokenizer

# 15. Inference on a sample text
def predict_sentiment(text, model, tokenizer):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=256)
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        predicted_class = torch.argmax(logits, dim=1).item()
    return "positive" if predicted_class == 1 else "negative"

# Example usage
if __name__ == "__main__":
    # Load model and tokenizer
    model, tokenizer = load_model_for_inference(model_save_path)
    sample_text = "This movie was absolutely fantastic! I loved it."
    sentiment = predict_sentiment(sample_text, model, tokenizer)
    print(f"Sentiment: {sentiment}")